swagger: '2.0'
info:
  description: |
    Welcome to the Versus API reference. With
    [the Versus API](https://github.com/220620-java/p1-web-teamversus) you can
    keep track     of the albums by a musical artist, add them to your
    collection, view other user's collections, and more.

    The Versus API is organized around the
    [REST](https://en.wikipedia.org/wiki/Representational_state_transfer)
    methodology, and it uses resource-oriented URLs, and common HTTP response
    codes to indicate API errors. Some requests are authenticated using an
    api key which obtained when using the login or register paths.
  version: 0.0.1
  title: The Versus API
  contact:
    name: TeamVersus
host: ec2-3-89-220-184.compute-1.amazonaws.com:8080
basePath: /versusapi
schemes:
  - http
consumes: 
  - "application/json"
produces: 
  - "application/json"
paths: 
  /login: 
    post: 
      tags:
        - Login
      description: "Allows a user to login and obtain an api key."
      operationId: "login"
      produces: 
        - "application/json"
      parameters: 
        - name: "Login"
          in: "body"
          description: "The object with the user's username and password"
          required: true
          schema: 
            $ref: "#/definitions/Login"
      responses: 
        "200":
          description: "A credentials object for use in subsequent calls."
          schema: 
            $ref: "#/definitions/Credentials"
        default: 
          description: "Unexpected error"
          schema: 
            $ref: "#/definitions/Error"
  /register: 
    post: 
      tags:
        - Register
      description: "Allows a person to create an account and obtain an api key."
      operationId: "register"
      produces: 
        - "application/json"
      parameters: 
        - name: "Registration"
          in: "body"
          description: "The information that will be used to create the account."
          required: true
          schema: 
            $ref: "#/definitions/Registration"
      responses: 
        "200":
          description: "A credentials object for use in subsequent calls."
          schema: 
            $ref: "#/definitions/Credentials"
        "409":
          description: "The username provided is already in use."
          schema: 
            $ref: "#/definitions/Error"
        default: 
          description: "Unexpected error"
          schema: 
            $ref: "#/definitions/Error"
  /artist:
    get:
      tags:
        - Artist
      description: "View the artists known in the system."
      operationId: "get_all_artists"
      produces: 
        - "application/json"
      responses:
        default:
          description: Successful operation
          schema:
              type: array
              items:
                $ref: '#/definitions/Artist'
    post:
      tags:
        - Artist
      description: "Adds an artist to the system."
      operationId: "add_artist_to_api"
      produces: 
        - "application/json"
      parameters: 
        - name: "artist"
          in: "body"
          description: "The artist to be added"
          required: true
          schema: 
            $ref: "#/definitions/NewArtist"
      responses: 
        "200":
          description: "The artist was successfully added."
        "409":
          description: "The artist is already in the system."
        default: 
          description: "Unexpected error"
          schema: 
            $ref: "#/definitions/Error"
  /album:
    get:
      tags:
        - Album
      description: "View the albums known in the system."
      operationId: "get_all_albums"
      produces: 
        - "application/json"
      responses:
        default:
          description: Successful operation
          schema:
              type: array
              items:
                $ref: '#/definitions/Album'
    post:
      tags:
        - Album
      description: "Adds an album to the system."
      operationId: "add_album_to_api"
      produces: 
        - "application/json"
      parameters: 
        - name: "album"
          in: "body"
          description: "The album to be added"
          required: true
          schema: 
            $ref: "#/definitions/NewAlbum"
      responses: 
        "200":
          description: "The album was successfully added."
        "409":
          description: "The album is already in the system."
        default: 
          description: "Unexpected error"
          schema: 
            $ref: "#/definitions/Error"
  /user:
    get:
      tags:
        - User
      description: "View the list of all current API users."
      operationId: "get_all_usernames"
      produces: 
        - "application/json"
      responses: 
        "200":
          description: "The profile was successfully retrieved."
          schema: 
            $ref: "#/definitions/Person"
        "404":
          description: "There is no user with that username."
          schema: 
            $ref: "#/definitions/Error"
        default: 
          description: "Unexpected error"
          schema: 
            $ref: "#/definitions/Error"
  /user/{username}:
    get:
      tags:
        - User
      description: "View an API user's profile."
      operationId: "get_user_profile"
      produces: 
        - "application/json"
      responses:
        default:
          description: Successful operation
          schema:
              type: array
              items:
                type : "string"
              example:
                - "abraddon12"
                - "zgearen"
  /user/{username}/inventory:
    get:
      tags:
        - Inventory
      description: "View an API user's inventory."
      operationId: "get_user_inventory"
      produces: 
        - "application/json"
      responses:
        "200":
          description: "The inventory was successfully retrieved."
          schema: 
            $ref: "#/definitions/InventoryItem"
        "404":
          description: "There is no user with that username."
          schema: 
            $ref: "#/definitions/Error"
        default: 
          description: "Unexpected error"
          schema: 
            $ref: "#/definitions/Error"
    post:
      tags:
        - Inventory
      description: "Adds an album to a users inventory. Note that a valid, matching API key is needed for this operation."
      operationId: "addalbumtousersinventory"
      produces: 
        - "application/json"
      parameters: 
        - name: "album"
          in: "body"
          description: "The album to be added"
          required: true
          schema: 
            $ref: "#/definitions/AlbumId"
        - name: versus-api-key
          in: header
          description: The API key assigned to {username}
          required: true
          type: string
      responses: 
        "200":
          description: "The album was successfully added."
        "401":
          description: "The api key provided is invalid."
        default: 
          description: "Unexpected error"
          schema: 
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Inventory
      description: "Deletes an album to a users inventory. Note that a valid, matching API key is needed for this operation."
      produces: 
        - "application/json"
      parameters: 
        - name: "album"
          in: "body"
          description: "The album to be deleted"
          required: true
          schema: 
            $ref: "#/definitions/AlbumId"
        - name: versus-api-key
          in: header
          description: The API key assigned to {username}
          required: true
          type: string
      responses: 
        "200":
          description: "The album was successfully deleted."
        "401":
          description: "The api key provided is invalid."
        default: 
          description: "Unexpected error"
          schema: 
            $ref: "#/definitions/Error"
securityDefinitions:
  versus-api-key:
    type: apiKey
    description: Provides API Key access to the Versus API
    in: header
definitions: 
  Login: 
    type: "object"
    description: The information needed to login.
    required:
      - "username"
      - "password"
    properties: 
      username: 
        type: "string"
        example: "abraddon12"
      password: 
        type: "string"
        example: "YsUCnEUSJk"
  Person: 
    type: "object"
    description: The information publicly available about an API user.
    required:
      - "username"
      - "firstname"
      - "lastname"
    properties: 
      username: 
        type: "string"
        example: "abraddon12"
      firstname: 
        type: "string"
        example: "Artur"
      lastname: 
        type: "string"
        example: "Walczak"
  Registration: 
    type: "object"
    description: The information needed to register. These are for input only and never returned by any API calls.
    allOf: 
      - 
        $ref: "#/definitions/Login"
      - 
        $ref: "#/definitions/Person"
  Credentials: 
    type: "object"
    description: Returned when a user registers or logs in. A user will need to
      add an entry like `versus-api-key=xxxx-yyyy-zzzz` to their request headers
      for some API calls.
    required:
      - "versus-api-key"
    properties: 
      versus-api-key: 
        type: "string"
        example: "xxxx-yyyy-zzzz"
  NewArtist: 
    type: "object"
    description: The information needed to add a new artist to the database.
    required:
      - "stagename"
    properties: 
      stagename: 
        type: "string"
        example: "Cardiff Revival"
  Artist: 
    type: "object"
    description: The full information for an artist in the database. An id is
      included for each artist to help distinguish two artists that have the
      same stage name.
    required:
      - "id"
    allOf: 
      - 
        $ref: "#/definitions/NewArtist"
      - 
        properties: 
          id: 
            type: "integer"
            format: "int64"
            example: 12
  NewAlbum:
    type: "object"
    description: The information needed to add a new album to the database.
    required:
      - "artistId"
      - "title"
    properties: 
        artistId: 
          type: "integer"
          format: "int64"
          example: 12
        title: 
          type: "string"
          example: "Courage of Fools"
  AlbumId:
    type: "object"
    description: The database id of an album. These objects are used for adding
      and removing items from a user's inventory.
    required:
      - "albumId"
    properties: 
        albumId: 
          type: "integer"
          format: "int64"
          example: 17
  Album: 
    type: "object"
    description: The full information for an album in the database.
    required:
      - "stagename"
    allOf: 
      - 
        $ref: "#/definitions/AlbumId"
      - 
        $ref: "#/definitions/NewAlbum"
      - 
        properties: 
          stagename: 
            type: "string"
            example: "Cardiff Revival"
  InventoryItem:
    type: "object"
    required: 
      - "username"
    properties:
      username:
        type: string
        example: "yourusername"
      albums:
        type: array
        xml:
          name: album
          wrapped: true
        items:
          $ref: '#/definitions/Album'
  Error: 
    type: "object"
    required: 
      - "code"
    properties: 
      code: 
        type: "integer"
        format: "int32"
        example: 400
      message: 
        type: "string"
        example: "The request was not formatted correctly."